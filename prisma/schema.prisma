datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  User
  Admin
}

enum AssignmentStatus {
  Pending
  Completed
  Overdue
  Graded
}

enum TodoStatus {
  Pending
  Completed
  Overdue
}

enum CourseType {
  AP
  IB
  Honors
  Regular
}

enum linkedAccounts {
  Google
  Github
  Discord
}

enum Lang {
  English
  Chinese
  Spanish
  French
}

model User {
  id               String           @id
  name             String
  email            String
  emailVerified    Boolean
  passwordSet      Boolean          @default(false)
  twoFactorEnabled Boolean          @default(false)
  role             Role             @default(User)
  image            String?
  onboarded        Boolean          @default(false)
  language         Lang             @default(English)
  location         String           @default("Location Not Set")
  createdAt        DateTime
  updatedAt        DateTime
  twoFactor        TwoFactor[]
  linkedAccounts   linkedAccounts[]
  Session          Session[]
  Account          Account[]
  Todos            Todos[]
  Notes            Notes[]
  Courses          Courses[]
  Notification     Notification[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  token     String
  createdAt DateTime
  updatedAt DateTime

  @@unique([token])
  @@map("session")
}

model Account {
  id           String    @id
  accountId    String
  providerId   String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String?
  refreshToken String?
  idToken      String?
  expiresAt    DateTime?
  password     String?

  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime

  createdAt DateTime?
  updatedAt DateTime?

  @@map("verification")
}

model Courses {
  id          String        @id @default(uuid())
  name        String
  grade       Float?        @default(-1)
  type        CourseType    @default(Regular)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  assignments Assignments[]
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  @@map("courses")
}

model Assignments {
  id        String           @id @default(uuid())
  name      String
  courseId  String
  course    Courses        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  grade     Float
  maxGrade  Float
  dueDate   DateTime
  status    AssignmentStatus @default(Pending)
  type      String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@map("assignments")
}

model Todos {
  id         String   @id @default(uuid())
  title      String
  desciption String?
  status     TodoStatus   @default(Pending)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("todos")
}

model Notes {
  id         String   @id @default(uuid())
  title      String
  desciption String?
  note       String
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("notes")
}

model Notification {
  id        String   @id @default(uuid())
  title     String   @default("Title Not Set")
  message   String   @default("Message Not Set")
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  senderId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notification")
}

model TwoFactor {
  id          String @id @default(uuid())
  secret      String
  backupCodes String
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("twoFactor")
}
