datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  user
  admin
}

enum Status {
  pending
  completed
  overdue
}

enum AssignmentType {
  classwork
  homework
  assessment
}

enum linkedAccounts {
  google
  github
  discord
}

model User {
  id                   String           @id @default(cuid())
  name                 String?
  email                String           @unique
  emailVerified        DateTime?
  image                String?
  role                 Role             @default(user)
  password             String?
  passwordResetToken   String?
  passwordResetExpires DateTime?
  VerificationToken    String?
  VerificationExpires  DateTime?
  linkedAccounts       linkedAccounts[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Todos     Reminder[]
  Notes     Notes[]
  Courses   Courses[]
}

model Courses {
  id    String @id @default(cuid())
  name  String
  grade String

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Assignments Assignments[]
  User        User?         @relation(fields: [userId], references: [id])
  userId      String?
}

model Assignments {
  id       String         @id @default(cuid())
  name     String
  courseId String         @map("course_id")
  course   Courses        @relation(fields: [courseId], references: [id])
  grade    Float
  maxGrade Float
  dueDate  DateTime
  status   Status         @default(pending)
  type     AssignmentType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reminder {
  id         String  @id @default(cuid())
  title      String
  desciption String?
  status     Status  @default(pending)
  userId     String  @map("user_id")
  user       User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notes {
  id         String  @id @default(cuid())
  title      String
  desciption String?
  note       String
  userId     String  @map("user_id")
  user       User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
