datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  user
  admin
}

enum Status {
  pending
  completed
  overdue
}

enum AssignmentType {
  classwork
  homework
  assessment
}

enum CourseType {
  AP
  IB
  Honors
  Regular
}

enum linkedAccounts {
  google
  github
  discord
}

enum Lang {
  english
  chinese
  spanish
  french
}

model User {
  id             String           @id
  name           String
  email          String
  emailVerified  Boolean
  role           Role             @default(user)
  image          String?
  onboarded      Boolean          @default(false)
  language       Lang             @default(english)
  location       String           @default("Country: Unset")
  createdAt      DateTime
  updatedAt      DateTime
  linkedAccounts linkedAccounts[]
  Session        Session[]
  Account        Account[]
  Todos          Reminder[]
  Notes          Notes[]
  Courses        Courses[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  token     String
  createdAt DateTime
  updatedAt DateTime

  @@unique([token])
  @@map("session")
}

model Account {
  id           String    @id
  accountId    String
  providerId   String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String?
  refreshToken String?
  idToken      String?
  expiresAt    DateTime?
  password     String?

  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime

  createdAt DateTime?
  updatedAt DateTime?

  @@map("verification")
}

model Courses {
  id          String        @id @default(cuid())
  name        String
  grade       String?
  type        CourseType    @default(Regular)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  assignments Assignments[]
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  @@map("courses")
}

model Assignments {
  id        String         @id @default(cuid())
  name      String
  courseId  String
  course    Courses        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  grade     Float
  maxGrade  Float
  dueDate   DateTime
  status    Status         @default(pending)
  type      AssignmentType
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@map("assignments")
}

model Reminder {
  id         String   @id @default(cuid())
  title      String
  desciption String?
  status     Status   @default(pending)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("reminder")
}

model Notes {
  id         String   @id @default(cuid())
  title      String
  desciption String?
  note       String
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("notes")
}
